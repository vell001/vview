-- phpMyAdmin SQL Dump
-- version 3.5.1
-- http://www.phpmyadmin.net
--
-- 主机: localhost:3306
-- 生成日期: 2013 年 10 月 05 日 17:38
-- 服务器版本: 5.5.29
-- PHP 版本: 5.4.3

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `vview`
--

-- --------------------------------------------------------

--
-- 表的结构 `category`
--

CREATE TABLE IF NOT EXISTS `category` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `info` longtext,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=gb2312 AUTO_INCREMENT=5 ;

--
-- 转存表中的数据 `category`
--

INSERT INTO `category` (`id`, `name`, `info`, `status`) VALUES
(1, '电脑', '电脑相关', 1),
(2, '手机', '手机评测、资讯', 1),
(3, '程序猿', '一个程序员的自我修养', 1),
(4, '资源', '资源分享地', 1);
(5, '杂谈', '随便一写', 1);

-- --------------------------------------------------------

--
-- 表的结构 `comment`
--

CREATE TABLE IF NOT EXISTS `comment` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL,
  `author` tinytext NOT NULL,
  `author_email` varchar(100) DEFAULT NULL,
  `author_url` varchar(200) DEFAULT NULL,
  `author_ip` varchar(100) NOT NULL DEFAULT '',
  `cdate` datetime NOT NULL,
  `content` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '0',
  `parent_id` bigint(20) unsigned DEFAULT '1',
  `user_id` bigint(20) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `post_id` (`post_id`),
  KEY `parent_id` (`parent_id`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- 表的结构 `label`
--

CREATE TABLE IF NOT EXISTS `label` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` tinytext NOT NULL,
  `info` longtext,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=gb2312 AUTO_INCREMENT=4 ;

--
-- 转存表中的数据 `label`
--

INSERT INTO `label` (`id`, `name`, `info`, `status`) VALUES
(1, '电脑', NULL, 1),
(2, '手机', NULL, 1),
(3, '程序猿', NULL, 1);

-- --------------------------------------------------------

--
-- 表的结构 `post`
--

CREATE TABLE IF NOT EXISTS `post` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `author` bigint(20) unsigned NOT NULL,
  `pdate` datetime NOT NULL,
  `content` longtext NOT NULL,
  `title` text NOT NULL,
  `excerpt` text,
  `status` int(11) NOT NULL DEFAULT '0',
  `comment_status` int(11) NOT NULL DEFAULT '1',
  `mdate` datetime NOT NULL,
  `category_id` bigint(20) unsigned NOT NULL DEFAULT '1',
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  `click_count` bigint(20) NOT NULL DEFAULT '0',
  `excerpt_img` text,
  `score` bigint(20) NOT NULL DEFAULT '1400',
  `uid` bigint(20) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `category_id` (`category_id`),
  KEY `author` (`author`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=19 ;

--
-- 转存表中的数据 `post`
--

INSERT INTO `post` (`id`, `author`, `pdate`, `content`, `title`, `excerpt`, `status`, `comment_status`, `mdate`, `category_id`, `parent`, `comment_count`, `click_count`, `excerpt_img`, `score`, `uid`) VALUES
(1, 1, '2013-10-04 10:23:28', '欢迎来到<a href="http://www.vell001.ml">Vell001</a>的世界。。。', '欢迎来到Vell001的世界。。。', '欢迎来到<a href="http://www.vell001.ml">Vell001</a>的世界。。。', 1, 1, '2013-10-03 15:23:28', 1, 0, 0, 6, 'images/post_img_1.jpg', 1406, 2013100516303000000),
(2, 1, '2013-10-03 15:23:28', '之前还没有编译过Windows上的Python，打包发布一般使用py2exe和pyinstaller，生成的文件至少有3MB。而且Python只有VS的Project文件，也就是说，如果自己要用GCC来编译，就需要自己编写或者修改Makefile了。我是在Debian上安装了Mingw32之后，修改默认的Makefile来让它支持编译成Windows版本，而且源代码有大幅度改动，所以这里就不把过程写出来了，我也忘了做了多少修改。编译方法可以参考我的上一篇博文。建议有VS的同学还是选择VS编译比较方便，不用改动那么多', 'Windows上最小的Python运行环境，700KB', '之前还没有编译过Windows上的Python，打包发布一般使用py2exe和pyinstaller，生成的文件至少有3MB。而且Python只有VS的Project文件，也就是说，如果自己要用GCC来编译，就需要自己编写或者修改Makefile了。', 1, 1, '2013-10-03 15:23:28', 1, 0, 0, 10, 'images/post_img_2.jpg', 1410, 2013100516350800000),
(3, 1, '2013-10-03 15:30:04', '之前还没有编译过Windows上的Python，打包发布一般使用py2exe和pyinstaller，生成的文件至少有3MB。而且Python只有VS的Project文件，也就是说，如果自己要用GCC来编译，就需要自己编写或者修改Makefile了。我是在Debian上安装了Mingw32之后，修改默认的Makefile来让它支持编译成Windows版本，而且源代码有大幅度改动，所以这里就不把过程写出来了，我也忘了做了多少修改。编译方法可以参考我的上一篇博文。建议有VS的同学还是选择VS编译比较方便，不用改动那么多', 'Windows上最小的Python运行环境，999KB', '之前还没有编译过Windows上的Python，打包发布一般使用py2exe和pyinstaller，生成的文件至少有3MB。而且Python只有VS的Project文件，也就是说，如果自己要用GCC来编译，就需要自己编写或者修改Makefile了。', 1, 1, '2013-10-03 15:30:04', 1, 0, 0, 18, 'images/post_img_2.jpg', 1418, 2013100516350900000),
(4, 1, '2416-12-08 04:39:47', '由于某些需要需要来回切换IP，之前找了几个修改IP的软件，总有些bug. 其实一想，还不如用批处理来的快捷方便。下面提供2个批处理用来切换、修改IP。1.这个批处理可以在两个或多个IP、掩码、网关之间选择切换，没有...asd', '好久没来...', '由于某些需要需要来回切换IP，之前找了几个修改IP的软件，总有些bug. 其实一想，还不如用批处理来的快捷方便。下面提供2个批处理用来切换、修改IP。1.这个批处理可以在两个或多个IP、掩码、网关之间选择切换，没有...asd', 0, 1, '2013-10-06 00:17:00', 4, 0, 0, 1, '/VView/images/post_img_3.jpg', 1401, 2013100516351800000),
(5, 1, '2013-10-03 15:32:44', '由于某些需要需要来回切换IP，之前找了几个修改IP的软件，总有些bug. 其实一想，还不如用批处理来的快捷方便。下面提供2个批处理用来切换、修改IP。1.这个批处理可以在两个或多个IP、掩码、网关之间选择切换，没有...', '好久没来', '由于某些需要需要来回切换IP，之前找了几个修改IP的软件，总有些bug. 其实一想，还不如用批处理来的快捷方便。下面提供2个批处理用来切换、修改IP。1.这个批处理可以在两个或多个IP、掩码、网关之间选择切换，没有...', 1, 1, '2013-10-03 15:32:44', 1, 0, 0, 7, 'images/post_img_5.jpg', 1407, 2013100516353800000),
(6, 1, '2013-10-04 12:23:28', '欢迎来到<a href="http://www.vell001.ml">VellBibi</a>的世界。。。<br/> <embed src="http://www.tudou.com/v/-2UggNNTfR4/&resourceId=0_05_02_99&tid=0/v.swf" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" wmode="opaque" width="480" height="400"></embed>', '欢迎来到VellBibi的世界。。。', '欢迎来到<a href="http://www.vell001.ml">VellBibi</a>的世界。。。', 1, 1, '2013-10-03 15:23:28', 1, 0, 0, 15, 'images/post_img_1.jpg', 1415, 2013100536350800000),
(7, 1, '2013-10-05 15:43:06', '&nbsp;hello world!!!', ' hello world!!!', '&nbsp;hello world!!!', 1, 1, '2013-10-05 15:43:06', 4, 0, 0, 1, '/VView/images/post_img_3.jpg', 1401, 2013100516352300000),
(8, 1, '2013-10-05 15:44:26', '&nbsp;hello world222<img src="/VView/attached/image/20131005/20131005001856_825.jpg" alt="" />!!!', ' hello world222!!! ', '&nbsp;hello world222!!!', 1, 1, '2013-10-05 15:44:26', 4, 0, 0, 27, '/VView/attached/image/20131005/20131005001856_825.jpg', 1427, 2013100516350830000),
(9, 2, '2013-10-05 15:54:29', '<p>\r\n	成功啦！！！！！！！。。。。。。<img style="width:260px;height:266px;" alt="" src="http://vell001:8080/VView/attached/image/20131005/20131005155333_140.png" width="401" height="309" />\r\n</p>\r\n<p>\r\n	果断上标志\r\n</p>', ' 成功啦', '\r\n	成功啦！！！！！！！。。。。。。\r\n\r\n\r\n	果断上标志\r\n', 0, 1, '2013-10-05 15:54:29', 4, 0, 0, 2, 'http://vell001:8080/VView/attached/image/20131005/20131005155333_140.png', 1402, 2013100556350800000),
(10, 2, '2013-10-05 15:55:55', '<p>\r\n	成功啦！！！！！！！。。。。。。<img style="width:260px;height:266px;" alt="" src="http://vell001:8080/VView/attached/image/20131005/20131005155333_140.png" width="401" height="309" /> \r\n</p>\r\n<p>\r\n	果断上标志\r\n</p>', ' 成功啦 ', '\r\n	成功啦！！！！！！！。。。。。。 \r\n\r\n\r\n	果断上标志\r\n', 0, 1, '2013-10-05 15:55:55', 4, 0, 0, 0, 'http://vell001:8080/VView/attached/image/20131005/20131005155333_140.png', 0, 2013100516358800000),
(11, 2, '2013-10-05 16:06:35', '<p>\r\n	成功啦！！！！！！！。。。。。。<img src="/VView/attached/image/20131005/20131005160631_372.png" alt="" />\r\n</p>\r\n<p>\r\n	果断上标志\r\n</p>', ' 成功啦  ', '\r\n	成功啦！！！！！！！。。。。。。\r\n\r\n\r\n	果断上标志\r\n', 0, 1, '2013-10-05 16:06:35', 4, 0, 0, 0, '/VView/attached/image/20131005/20131005160631_372.png', 0, 2013100516350990000),
(12, 1, '2013-10-05 19:48:57', '哈哈哈。。。高兴呀。。。', '成功啦！！！ ', '哈哈哈。。。高兴呀。。。', 0, 1, '2013-10-05 19:49:30', 4, 0, 0, 0, '/VView/images/post_img_4.jpg', 0, 2013100519481000001),
(13, 1, '2013-10-05 23:06:03', '&nbsp;hello world!!!hahhahahs', 'hello world!!!', '&nbsp;hello world!!!hahhahahs', 1, 1, '2013-10-05 23:06:18', 4, 0, 0, 1, '/VView/images/post_img_2.jpg', 1401, 2013100523053300000),
(14, 1, '2013-10-06 00:03:51', 'asdfsdfadsfasdfacccadsfreadvfadf', 'test', 'asdfsdfadsfasdfacccadsfreadvfadf', 1, 1, '2013-10-06 00:07:20', 4, 0, 0, 8, '/VView/images/post_img_1.jpg', 1408, 201310060034500001),
(15, 1, '2013-10-06 00:41:21', 'hahah', 'vell002', 'hahah', 1, 1, '2013-10-06 00:50:11', 4, 0, 0, 9, '/VView/images/post_img_5.jpg', 1409, 201310060410900000),
(16, 2, '2013-10-06 00:53:27', '<h2 style="vertical-align:baseline;background-color:#FFFFFF;font-size:24px;font-weight:400;font-family:Vera, Helvetica, Georgia;color:#2C2C29;">\r\n	<br />\r\n</h2>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	之前还没有编译过Windows上的Python，打包发布一般使用py2exe和pyinstaller，生成的文件至少有3MB。而且Python只有VS的Project文件，也就是说，如果自己要用GCC来编译，就需要自己编写或者修改Makefile了。我是在Debian上安装了Mingw32之后，修改默认的Makefile来让它支持编译成Windows版本，而且源代码有大幅度改动，所以这里就不把过程写出来了，我也忘了做了多少修改。编译方法可以参考我的上一篇博文。建议有VS的同学还是选择VS编译比较方便，不用改动那么多。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/python23.jpg"><img class="alignnone size-full wp-image-5214" alt="python23" src="http://xiaoxia.org/upfiles/2013/09/python23.jpg" width="491" height="226" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<span id="more-5213" style="vertical-align:baseline;background-color:transparent;"></span> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	图是我编译好的Python环境，运行以前写的Sogou代理脚本。这次我使用的是Python2.3这个版本，编译出来的文件用UPX压缩过之后，体积还是小的很可观。对比如下：\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	Python2.3（Windows）: &nbsp; 不带库 412KB，带基本标准库 695KB<br />\r\nPython2.6（Linux）: &nbsp; 不带库 800KB，带基本标准库 1.3MB<br />\r\nPython3.3（Linux）：不带库 1MB，带基本标准库 2.1MB\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	这次Windows的Python2.3版本，编译了下面的内建模块：\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/builtin23.jpg"><img class="alignnone size-full wp-image-5215" alt="builtin23" src="http://xiaoxia.org/upfiles/2013/09/builtin23.jpg" width="638" height="99" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	标准库文件都打包进了libpy.dll，这不是一个动态链接库文件，而是一个zip压缩包，里面有标准库编译好的pyc。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/standard23.jpg"><img class="alignnone size-full wp-image-5217" alt="standard23" src="http://xiaoxia.org/upfiles/2013/09/standard23.jpg" width="536" height="610" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	编译好的Python.exe也改名成为runapp.exe了。而且默认参数运行的不是一个可交互的shell，如果要交互，可以随意加一个参数，例如-v之类的。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	如果默认没有参数的话，会调用当前目录下一个叫main.app的pyc文件（编译好的py）。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	做的这些修改，都是为了方便把Python运行环境部署和嵌入到其他应用之中。需要注意的是，毕竟不是一个完整的环境，所以某些功能例如SSL以及emails的标准库，都不在其中。我喜欢的urllib和SimpleHTTPServer还是有的，如果没有，可以自己打包进libpy.dll&nbsp;<img src="http://xiaoxia.org/wp-includes/images/smilies/icon_biggrin.gif" alt=":-D" class="wp-smiley" /> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	－－2013年9月26日更新－－\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	附 SogouProxy便携版：\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/SogouProxy.zip">下载 SogouProxy</a>&nbsp; （Python2.3运行环境，695KB）\r\n</p>', 'Windows上最小的Python运行环境，700KB', '\r\n	\r\n\r\n\r\n	之前还没有编译过Windows上的Python，打包发布一般使用py2exe和pyinstaller，生成的文件至少有3MB。而且Python只有VS的Project文件，也就是说，如果自己要用GCC来编译，就需要自己编写或者修改Makefile了。我是在Debian上安装了Mingw32之后，修改默认的Makefile来让它支持编译成Windows版本，而且源代码有大幅度改动，所以这里就不把过程写出来了，我也忘了做了多少修改。编译方法可以参考我的上一篇博文。建议有VS的同学还是选择VS编译比较方便，不用改动那么多。\r\n\r\n\r\n	 \r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	图是我编译好的Python环境，运行以前写的Sogou代理脚本。这次我使用的是Python2.3这个版本，编译出来的文件用UPX压缩过之后，体积还是小的很可观。对比如下：\r\n\r\n\r\n	Python2.3（Windows）: &nbsp; 不带库 412KB，带基本标准库 695KB\r\nPython2.6（Linux）: &nbsp; 不带库 800KB，带基本标准库 1.3MB\r\nPython3.3（Linux）：不带库 1MB，带基本标准库 2.1MB\r\n\r\n\r\n	这次Windows的Python2.3版本，编译了下面的内建模块：\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	标准库文件都打包进了libpy.dll，这不是一个动态链接库文件，而是一个zip压缩包，里面有标准库编译好的pyc。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	编译好的Python.exe也改名成为runapp.exe了。而且默认参数运行的不是一个可交互的shell，如果要交互，可以随意加一个参数，例如-v之类的。\r\n\r\n\r\n	如果默认没有参数的话，会调用当前目录下一个叫main.app的pyc文件（编译好的py）。\r\n\r\n\r\n	做的这些修改，都是为了方便把Python运行环境部署和嵌入到其他应用之中。需要注意的是，毕竟不是一个完整的环境，所以某些功能例如SSL以及emails的标准库，都不在其中。我喜欢的urllib和SimpleHTTPServer还是有的，如果没有，可以自己打包进libpy.dll&nbsp; \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	－－2013年9月26日更新－－\r\n\r\n\r\n	附 SogouProxy便携版：\r\n\r\n\r\n	下载 SogouProxy&nbsp; （Python2.3运行环境，695KB）\r\n', 1, 1, '2013-10-06 00:55:41', 4, 0, 0, 6, 'http://xiaoxia.org/upfiles/2013/09/python23.jpg', 1406, 201310060531600000),
(17, 1, '2013-10-06 01:07:04', '<p style="text-align:left;">\r\n	<h2 class="title" style="text-align:left;">\r\n		Android 在线程中改变控件的属性<span style="font-size:12px;font-weight:normal;line-height:1.5;">有三个方法：</span>\r\n	</h2>\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p style="text-align:left;">\r\n	1、使用控件的post方法\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">public boolean post (Runnable action)</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">参数action里的run方法会在主线程中运行。</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">例如要改变TextView的text,代码如下：</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">myTextView.post(new Runnable(){</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; @Override</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; public void run() {</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text");</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; }</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">});</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p style="text-align:left;">\r\n	2、使用Handler的消息机制\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<br />\r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">线程内调用sendMessage方法</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">public final boolean sendMessage (Message msg)</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">主线程里的Handler对象重写handleMessage方法</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">public void handleMessage (Message msg)</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">也以改变TextView的text为例，代码如下：</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">线程内：</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">Message message = new Message();</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">message.what = 0x01010101;</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">mHandler.sendMessage(message);</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">主线程：</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">mHandler = new Handler(){</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; @Override</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; public void handleMessage(Message msg) {</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; if(msg.what == 0x01010101){</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text");</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; }</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; }</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">};</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">3、使用AsyncTask</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">AsyncTask的特点是任务在主线程之外运行，而回调方法是在主线程中执行</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<br />\r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">AsyncTask定义了三种泛型类型 Params，Progress和Result。</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; Params 启动任务执行的输入参数，比如HTTP请求的URL。</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; Progress 后台任务执行的百分比。</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; Result 后台执行任务最终返回的结果，比如String。</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">onPreExecute() 当任务执行之前开始调用此方法，可以在这里显示进度对话框。</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">doInBackground(Params... params) 此方法在后台线程执行，完成任务的主要工作，通常需要较长的时间。</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;在执行过程中可以调用publicProgress(Progress... values)来更新任务的进度。</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">onProgressUpdate(Progress... values) 此方法在主线程执行，用于显示任务执行的进度。</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">onPostExecute(Result result) 此方法在主线程执行，任务执行的结果作为此方法的参数返回。</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">使用AsyncTask要注意的一些规则：</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; 任务实例必须创建在UI线程</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; execute(Params... params)必须在UI线程上调用</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; 任务会执行仅一次，若要再执行则要再新生成一个任务</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">仍以改变TextView的text为例，</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">虽然用AsyncTask来只实现这些有些牛刀杀鸡的意思，代码如下：</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">class MyTask extends AsyncTask&lt;Object, Object, Object&gt; {</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; @Override</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; //这个方法可以理解为线程的run方法</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; protected Object doInBackground(Object... params) {</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; this.publishProgress(null, null, null);</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; }</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; @Override</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; //在doInBackground方法里如果有调用publishProgress方法的话就会运行这个方法</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; //这个方法就是在线程运行时改变控件属性的方法</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; protected void onProgressUpdate(Object... values) {</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text");</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; }</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; @Override</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; //这个方法是doInBackground方法运行完后执行</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; protected void onPostExecute(Object result) {</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text 2");</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">&nbsp; &nbsp; }</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">}</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>\r\n<p style="text-align:left;">\r\n	&nbsp;\r\n</p>\r\n<p>\r\n	<br />\r\n</p>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">主线程内的调用</span> \r\n</div>\r\n<div style="text-align:left;">\r\n	<span style="line-height:1.5;">new MyTask().execute(null, null, null);</span> \r\n</div>\r\n<p>\r\n	<br />\r\n</p>', 'Android 在线程中改变控件的属性', '\r\n	\r\n		Android 在线程中改变控件的属性有三个方法：\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	1、使用控件的post方法\r\n\r\n\r\n	\r\n\r\n\r\n	public boolean post (Runnable action) \r\n\r\n\r\n	参数action里的run方法会在主线程中运行。 \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	例如要改变TextView的text,代码如下： \r\n\r\n\r\n	myTextView.post(new Runnable(){ \r\n\r\n\r\n	&nbsp; &nbsp; @Override \r\n\r\n\r\n	&nbsp; &nbsp; public void run() { \r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text"); \r\n\r\n\r\n	&nbsp; &nbsp; } \r\n\r\n\r\n	}); \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	2、使用Handler的消息机制\r\n\r\n\r\n	\r\n\r\n\r\n	\r\n\r\n\r\n	线程内调用sendMessage方法 \r\n\r\n\r\n	public final boolean sendMessage (Message msg) \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	主线程里的Handler对象重写handleMessage方法 \r\n\r\n\r\n	public void handleMessage (Message msg) \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	也以改变TextView的text为例，代码如下： \r\n\r\n\r\n	线程内： \r\n\r\n\r\n	Message message = new Message(); \r\n\r\n\r\n	message.what = 0x01010101; \r\n\r\n\r\n	mHandler.sendMessage(message); \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	主线程： \r\n\r\n\r\n	mHandler = new Handler(){ \r\n\r\n\r\n	&nbsp; &nbsp; @Override \r\n\r\n\r\n	&nbsp; &nbsp; public void handleMessage(Message msg) { \r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; if(msg.what == 0x01010101){ \r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text"); \r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; } \r\n\r\n\r\n	&nbsp; &nbsp; } \r\n\r\n\r\n	}; \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	3、使用AsyncTask \r\n\r\n\r\n	AsyncTask的特点是任务在主线程之外运行，而回调方法是在主线程中执行 \r\n\r\n\r\n	\r\n\r\n\r\n	\r\n\r\n\r\n	\r\n\r\n\r\n	AsyncTask定义了三种泛型类型 Params，Progress和Result。 \r\n\r\n\r\n	&nbsp; &nbsp; Params 启动任务执行的输入参数，比如HTTP请求的URL。 \r\n\r\n\r\n	&nbsp; &nbsp; Progress 后台任务执行的百分比。 \r\n\r\n\r\n	&nbsp; &nbsp; Result 后台执行任务最终返回的结果，比如String。 \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	onPreExecute() 当任务执行之前开始调用此方法，可以在这里显示进度对话框。 \r\n\r\n\r\n	doInBackground(Params... params) 此方法在后台线程执行，完成任务的主要工作，通常需要较长的时间。 \r\n\r\n\r\n	\r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;在执行过程中可以调用publicProgress(Progress... values)来更新任务的进度。 \r\n\r\n\r\n	onProgressUpdate(Progress... values) 此方法在主线程执行，用于显示任务执行的进度。 \r\n\r\n\r\n	onPostExecute(Result result) 此方法在主线程执行，任务执行的结果作为此方法的参数返回。 \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	使用AsyncTask要注意的一些规则： \r\n\r\n\r\n	&nbsp; &nbsp; 任务实例必须创建在UI线程 \r\n\r\n\r\n	&nbsp; &nbsp; execute(Params... params)必须在UI线程上调用 \r\n\r\n\r\n	&nbsp; &nbsp; 任务会执行仅一次，若要再执行则要再新生成一个任务 \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	仍以改变TextView的text为例， \r\n\r\n\r\n	虽然用AsyncTask来只实现这些有些牛刀杀鸡的意思，代码如下： \r\n\r\n\r\n	\r\n\r\n\r\n	\r\n\r\n\r\n	class MyTask extends AsyncTask&lt;Object, Object, Object&gt; { \r\n\r\n\r\n	&nbsp; &nbsp; @Override \r\n\r\n\r\n	&nbsp; &nbsp; //这个方法可以理解为线程的run方法 \r\n\r\n\r\n	&nbsp; &nbsp; protected Object doInBackground(Object... params) { \r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; this.publishProgress(null, null, null); \r\n\r\n\r\n	&nbsp; &nbsp; } \r\n\r\n\r\n	\r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp; &nbsp; @Override \r\n\r\n\r\n	&nbsp; &nbsp; //在doInBackground方法里如果有调用publishProgress方法的话就会运行这个方法 \r\n\r\n\r\n	&nbsp; &nbsp; //这个方法就是在线程运行时改变控件属性的方法 \r\n\r\n\r\n	&nbsp; &nbsp; protected void onProgressUpdate(Object... values) { \r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text"); \r\n\r\n\r\n	&nbsp; &nbsp; } \r\n\r\n\r\n	\r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp; &nbsp; @Override \r\n\r\n\r\n	&nbsp; &nbsp; //这个方法是doInBackground方法运行完后执行 \r\n\r\n\r\n	&nbsp; &nbsp; protected void onPostExecute(Object result) { \r\n\r\n\r\n	&nbsp; &nbsp; &nbsp; &nbsp; myTextView.setText("new text 2"); \r\n\r\n\r\n	&nbsp; &nbsp; } \r\n\r\n\r\n	} \r\n\r\n\r\n	\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	\r\n\r\n\r\n	主线程内的调用 \r\n\r\n\r\n	new MyTask().execute(null, null, null); \r\n\r\n\r\n	\r\n', 1, 1, '2013-10-06 01:14:47', 4, 0, 0, 14, '/VView/images/post_img_2.jpg', 1414, 201310061054900000),
(18, 1, '2013-10-06 01:17:07', '<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	昨天在研究如何在嵌入式Linux上搭建Python运行环境，因为有了Python之后，很多工具例如GoAgent之类的东西就可以用上场了。昨天成功编译了Python2.6，参考了网上很多方法，但最后无果而终，现在总结了一套自己的编译方法，基本上可以秒杀所有Python版本的交叉编译，这里做一个总结。我的编译环境是Debian64位 无桌面版本，体积很小巧，安装在办公室电脑虚拟机里，在家里也可以远程编译代码。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	首先在Python网站下载最新版源代码，这里我使用Python 3.3版本。解压下，有下面这堆东西。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/download.jpg"><img class="alignnone size-medium wp-image-5200" alt="download" src="http://xiaoxia.org/upfiles/2013/09/download-700x158.jpg" width="700" height="158" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<span id="more-5199" style="vertical-align:baseline;background-color:transparent;"></span> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	接着，编辑Modules/Setup.dist，把需要用到的模块，去掉注释。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	因为我打算把_socket，math，time，md5，sha1，select等模块静态编译进去（这样就不用lib-dynload里的一堆so文件都可以使用那些功能了）。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/shared.jpg"><img class="alignnone size-medium wp-image-5201" alt="shared" src="http://xiaoxia.org/upfiles/2013/09/shared-700x427.jpg" width="700" height="427" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	为了支持中文的decode和encode，下面两个模块也要编译进去。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/cncodecs.jpg"><img class="alignnone size-full wp-image-5202" alt="cncodecs" src="http://xiaoxia.org/upfiles/2013/09/cncodecs.jpg" width="501" height="112" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	如果你把zlib去掉了注释，要先交叉编译zlib，把编译出来的两个头文件和一个libz.a放到/usr/local/或者其他编译器能够发现的地方。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	下面在configure之前，需要做一些小动作，不然会提示出错。\r\n</p>\r\n<blockquote style="vertical-align:baseline;background-color:#FFFFFF;text-align:justify;color:#2C2C29;font-family:Tahoma;font-size:11px;">\r\n	<p style="vertical-align:baseline;background-color:transparent;font-size:1.2em;">\r\n		root@dev:~/Python-3.3.2# echo&nbsp;ac_cv_file__dev_ptmx=no &gt; config.site<br />\r\nroot@dev:~/Python-3.3.2# echo&nbsp;ac_cv_file__dev_ptc=no &gt;&gt; config.site<br />\r\nroot@dev:~/Python-3.3.2# export CONFIG_SITE=config.site<br />\r\nroot@dev:~/Python-3.3.2# ./configure CC=mipsel-linux-gcc CXX=mipsel-linux-g++ AR=mipsel-linux-ar RANLIB=mipsel-linux-ranlib --host=mipsel-linux --build=mipsel --disable-ipv6\r\n	</p>\r\n</blockquote>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	我的交叉编译工具是mipsel-linux-*。如无意外，运行完毕应该得到Makefile文件。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	编辑Makefile，在CONFIGURE_LDFLAGS后面添加 -s -static 两个选项。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	下一步，开始编译。\r\n</p>\r\n<blockquote style="vertical-align:baseline;background-color:#FFFFFF;text-align:justify;color:#2C2C29;font-family:Tahoma;font-size:11px;">\r\n	<p style="vertical-align:baseline;background-color:transparent;font-size:1.2em;">\r\n		root@dev:~/Python-3.3.2# make python\r\n	</p>\r\n</blockquote>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	如无意外，当前目录下就可以得到python。因为我前面忘了加-s参数，所以编译出来体积有点大。可以使用strip工具去掉调试信息和一些不必要的内容，不影响运行。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/makepython.jpg"><img class="alignnone size-medium wp-image-5203" alt="makepython" src="http://xiaoxia.org/upfiles/2013/09/makepython-700x182.jpg" width="700" height="182" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	strip之后，文件大小从8MB变为3MB。不过还是蛮大的，试试使用UPX压缩一下。工具下载：<a href="http://upx.sourceforge.net/" target="_blank">http://upx.sourceforge.net/</a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	UPX之后，文件大小为 1 MB。对程序运行效率会有影响，不过只在启动的时候有影响，不会影响正常解释脚本的速度&nbsp;<img src="http://xiaoxia.org/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" /> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/upx.jpg"><img class="alignnone size-full wp-image-5204" alt="upx" src="http://xiaoxia.org/upfiles/2013/09/upx.jpg" width="555" height="248" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	使用scp或者ftp复制该文件到路由器上，看看能否执行。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/python3.jpg"><img class="alignnone size-full wp-image-5205" alt="python3" src="http://xiaoxia.org/upfiles/2013/09/python3.jpg" width="550" height="321" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	可以正确显示版本号，不过无法进入命令行，提示缺少encodings，那是因为还没有把Python的Lib复制过来。如果是Python2.x的版本，在这里已经可以运行使用了。所以，剩下只需要把要用到的标准库文件都复制过来就行了。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	复制一份Lib目录，然后把不要的库像tkinter的全部删掉，encodings下除gbk和utf8以外的其它编码也不需要。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/lib.jpg"><img class="alignnone size-medium wp-image-5207" alt="lib" src="http://xiaoxia.org/upfiles/2013/09/lib-700x331.jpg" width="700" height="331" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	剩下5MB大小。复制到路由的对应目录下，比如说 /tmp/root/python/lib/python3.3，同时设置 export PYTHONHOME=/tmp/root/python。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	再尝试运行，发现缺少 _sysconfiguredata.py 文件，这个文件在Modules里应该能找到，或者别的地方，把它复制过来，放到标准库目录下就OK。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/runpy3.jpg"><img class="alignnone size-full wp-image-5208" alt="runpy3" src="http://xiaoxia.org/upfiles/2013/09/runpy3.jpg" width="580" height="278" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	因为标准库有5MB那么大，不是很方便写到Flash上，所以可以考虑把标准库压缩成一个Zip文件。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	在python3.3目录下，使用批处理把所有py扩展名，通过 python3 -m py_compile *.c 编译成pyc文件，然后删除原来的py文件，接着执行\r\n</p>\r\n<blockquote style="vertical-align:baseline;background-color:#FFFFFF;text-align:justify;color:#2C2C29;font-family:Tahoma;font-size:11px;">\r\n	<p style="vertical-align:baseline;background-color:transparent;font-size:1.2em;">\r\n		zip -9r python33.zip *\r\n	</p>\r\n</blockquote>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	得到的文件大小为1MB。（我的python2.6的大小是500KB）。然后复制python33.zip到 /tmp/root/python/lib/python33.zip。就可以使用了。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	其实，像 pyinstaller和py2exe这类压缩工具，也是用了同样的方法，而我这里是打包python运行环境到嵌入式Linux上。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	比较一下 Python2.6 和 Python3.3 的在路由器上的体积。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	Python2.6: &nbsp; 不带库 800KB，带基本标准库 1.3MB<br />\r\nPython3.3：不带库 1MB，带基本标准库 2.1MB\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	个人比较喜欢Python2.6的版本，因为不论是体积还是运行速度，都好很多。配合100KB的&nbsp;<a href="http://bottlepy.org/" target="_blank">bottlepy</a>&nbsp;网页开发框架，编写了一个简单的页面。\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	<a href="http://xiaoxia.org/upfiles/2013/09/finish.jpg"><img class="alignnone size-full wp-image-5209" alt="finish" src="http://xiaoxia.org/upfiles/2013/09/finish.jpg" width="597" height="508" /></a> \r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>\r\n<p style="vertical-align:baseline;background-color:#FFFFFF;font-size:1.2em;color:#2C2C29;font-family:Tahoma;">\r\n	&nbsp;\r\n</p>', '继续玩路由器，交叉编译Python 3.3，压成1.5MB', '\r\n	昨天在研究如何在嵌入式Linux上搭建Python运行环境，因为有了Python之后，很多工具例如GoAgent之类的东西就可以用上场了。昨天成功编译了Python2.6，参考了网上很多方法，但最后无果而终，现在总结了一套自己的编译方法，基本上可以秒杀所有Python版本的交叉编译，这里做一个总结。我的编译环境是Debian64位 无桌面版本，体积很小巧，安装在办公室电脑虚拟机里，在家里也可以远程编译代码。\r\n\r\n\r\n	首先在Python网站下载最新版源代码，这里我使用Python 3.3版本。解压下，有下面这堆东西。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	 \r\n\r\n\r\n	接着，编辑Modules/Setup.dist，把需要用到的模块，去掉注释。\r\n\r\n\r\n	因为我打算把_socket，math，time，md5，sha1，select等模块静态编译进去（这样就不用lib-dynload里的一堆so文件都可以使用那些功能了）。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	为了支持中文的decode和encode，下面两个模块也要编译进去。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	如果你把zlib去掉了注释，要先交叉编译zlib，把编译出来的两个头文件和一个libz.a放到/usr/local/或者其他编译器能够发现的地方。\r\n\r\n\r\n	下面在configure之前，需要做一些小动作，不然会提示出错。\r\n\r\n\r\n	\r\n		root@dev:~/Python-3.3.2# echo&nbsp;ac_cv_file__dev_ptmx=no &gt; config.site\r\nroot@dev:~/Python-3.3.2# echo&nbsp;ac_cv_file__dev_ptc=no &gt;&gt; config.site\r\nroot@dev:~/Python-3.3.2# export CONFIG_SITE=config.site\r\nroot@dev:~/Python-3.3.2# ./configure CC=mipsel-linux-gcc CXX=mipsel-linux-g++ AR=mipsel-linux-ar RANLIB=mipsel-linux-ranlib --host=mipsel-linux --build=mipsel --disable-ipv6\r\n	\r\n\r\n\r\n	我的交叉编译工具是mipsel-linux-*。如无意外，运行完毕应该得到Makefile文件。\r\n\r\n\r\n	编辑Makefile，在CONFIGURE_LDFLAGS后面添加 -s -static 两个选项。\r\n\r\n\r\n	下一步，开始编译。\r\n\r\n\r\n	\r\n		root@dev:~/Python-3.3.2# make python\r\n	\r\n\r\n\r\n	如无意外，当前目录下就可以得到python。因为我前面忘了加-s参数，所以编译出来体积有点大。可以使用strip工具去掉调试信息和一些不必要的内容，不影响运行。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	strip之后，文件大小从8MB变为3MB。不过还是蛮大的，试试使用UPX压缩一下。工具下载：http://upx.sourceforge.net/ \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	UPX之后，文件大小为 1 MB。对程序运行效率会有影响，不过只在启动的时候有影响，不会影响正常解释脚本的速度&nbsp; \r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	使用scp或者ftp复制该文件到路由器上，看看能否执行。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	可以正确显示版本号，不过无法进入命令行，提示缺少encodings，那是因为还没有把Python的Lib复制过来。如果是Python2.x的版本，在这里已经可以运行使用了。所以，剩下只需要把要用到的标准库文件都复制过来就行了。\r\n\r\n\r\n	复制一份Lib目录，然后把不要的库像tkinter的全部删掉，encodings下除gbk和utf8以外的其它编码也不需要。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	剩下5MB大小。复制到路由的对应目录下，比如说 /tmp/root/python/lib/python3.3，同时设置 export PYTHONHOME=/tmp/root/python。\r\n\r\n\r\n	再尝试运行，发现缺少 _sysconfiguredata.py 文件，这个文件在Modules里应该能找到，或者别的地方，把它复制过来，放到标准库目录下就OK。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	因为标准库有5MB那么大，不是很方便写到Flash上，所以可以考虑把标准库压缩成一个Zip文件。\r\n\r\n\r\n	在python3.3目录下，使用批处理把所有py扩展名，通过 python3 -m py_compile *.c 编译成pyc文件，然后删除原来的py文件，接着执行\r\n\r\n\r\n	\r\n		zip -9r python33.zip *\r\n	\r\n\r\n\r\n	得到的文件大小为1MB。（我的python2.6的大小是500KB）。然后复制python33.zip到 /tmp/root/python/lib/python33.zip。就可以使用了。\r\n\r\n\r\n	其实，像 pyinstaller和py2exe这类压缩工具，也是用了同样的方法，而我这里是打包python运行环境到嵌入式Linux上。\r\n\r\n\r\n	比较一下 Python2.6 和 Python3.3 的在路由器上的体积。\r\n\r\n\r\n	Python2.6: &nbsp; 不带库 800KB，带基本标准库 1.3MB\r\nPython3.3：不带库 1MB，带基本标准库 2.1MB\r\n\r\n\r\n	个人比较喜欢Python2.6的版本，因为不论是体积还是运行速度，都好很多。配合100KB的&nbsp;bottlepy&nbsp;网页开发框架，编写了一个简单的页面。\r\n\r\n\r\n	 \r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	&nbsp;\r\n\r\n\r\n	&nbsp;\r\n', 0, 1, '2013-10-06 01:17:24', 4, 0, 0, 0, 'http://xiaoxia.org/upfiles/2013/09/download-700x158.jpg', 0, 201310061163500002);

-- --------------------------------------------------------

--
-- 表的结构 `post_label`
--

CREATE TABLE IF NOT EXISTS `post_label` (
  `post_id` bigint(20) unsigned NOT NULL,
  `label_id` bigint(20) unsigned NOT NULL,
  PRIMARY KEY (`post_id`,`label_id`),
  KEY `label_id` (`label_id`)
) ENGINE=InnoDB DEFAULT CHARSET=gb2312;

-- --------------------------------------------------------

--
-- 表的结构 `user`
--

CREATE TABLE IF NOT EXISTS `user` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(40) NOT NULL,
  `password` varchar(16) NOT NULL,
  `email` varchar(40) NOT NULL,
  `user_url` varchar(100) DEFAULT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  `rdate` datetime NOT NULL,
  `ldate` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=4 ;

--
-- 转存表中的数据 `user`
--

INSERT INTO `user` (`id`, `username`, `password`, `email`, `user_url`, `status`, `rdate`, `ldate`) VALUES
(1, 'vell001', 'dheaZubfW7Y=', 'vell001@qq.com', 'www.vell001.ml', 3, '2013-10-03 15:23:24', NULL),
(2, 'vell002', 'dheaZubfW7Y=', 'vell001@qq.com', 'www.vell001.ml', 2, '2013-10-05 10:23:24', NULL),
(3, 'vell003', 'dheaZubfW7Y=', 'vell001@qq.com', 'www.vell001.ml', 1, '2013-10-05 11:23:24', NULL);

--
-- 限制导出的表
--

--
-- 限制表 `comment`
--
ALTER TABLE `comment`
  ADD CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`),
  ADD CONSTRAINT `comment_ibfk_2` FOREIGN KEY (`parent_id`) REFERENCES `comment` (`id`),
  ADD CONSTRAINT `comment_ibfk_3` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`);

--
-- 限制表 `post`
--
ALTER TABLE `post`
  ADD CONSTRAINT `post_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`),
  ADD CONSTRAINT `post_ibfk_2` FOREIGN KEY (`author`) REFERENCES `user` (`id`);

--
-- 限制表 `post_label`
--
ALTER TABLE `post_label`
  ADD CONSTRAINT `post_label_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`),
  ADD CONSTRAINT `post_label_ibfk_2` FOREIGN KEY (`label_id`) REFERENCES `label` (`id`);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
